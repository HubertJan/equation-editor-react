{"version":3,"sources":["components/EquationEditor/EquationEditor.tsx","components/Page/Page.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["window","jQuery","$","require","mathQuill","MathQuill","getInterface","EquationEditor","props","element","mathField","ignoreEditEvents","createRef","this","onChange","value","config","handlers","edit","latex","autoCommands","autoOperatorNames","MathField","current","ref","Component","equationWrapperStyle","fontSize","position","top","left","transform","equationOutputStyle","Page","useState","equation","updateEquation","style","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8SAQAA,OAAOC,OAASC,IAIhBC,EAAQ,IAKR,IAAMC,EAAYC,UAAUC,aAAa,GAoD1BC,E,YAtCb,WAAYC,GAA6B,IAAD,8BACtC,4CAAMA,KALRC,aAIwC,IAHxCC,eAGwC,IAFxCC,sBAEwC,EAGtC,EAAKF,QAAUG,sBACf,EAAKF,UAAY,KAGjB,EAAKC,iBAAmB,EAPc,E,iFAUnB,IAAD,SAC2CE,KAAKL,MAA1DM,EADU,EACVA,SAAUC,EADA,EACAA,MAEZC,EAAS,CACbC,SAAU,CACRC,KAAM,WACA,EAAKP,iBAAmB,EAC1B,EAAKA,kBAAoB,EAGvB,EAAKD,UAAUS,UAAYJ,GAC7BD,EAAS,EAAKJ,UAAUS,WAI9BC,aAfgB,EACOA,aAevBC,kBAhBgB,EACqBA,mBAkBvCR,KAAKH,UAAYN,EAAUkB,UAAUT,KAAKJ,QAAQc,QAASP,GAC3DH,KAAKH,UAAUS,MAAMJ,GAAS,M,+BAI9B,OAAO,0BAAMS,IAAKX,KAAKJ,c,GAvCEgB,aClBvBC,EAAsC,CAC1CC,SAAU,OACVC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,UAAW,yBAGPC,EAAqC,CAAEL,SAAU,QAsBxCM,EAlBF,WAAO,IAAD,EACkBC,mBAAS,OAD3B,mBACVC,EADU,KACAC,EADA,KAGjB,OACE,yBAAKC,MAAOX,GACV,kBAAC,EAAD,CACEX,MAAOoB,EACPrB,SAAUsB,EACVhB,aAAa,kEACbC,kBAAkB,gBAEpB,uBAAGgB,MAAOL,GACR,8BAAOG,MClBAG,EARO,WACpB,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCGcC,QACW,cAA7BxC,OAAOyC,SAASC,UAEe,UAA7B1C,OAAOyC,SAASC,UAEhB1C,OAAOyC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b43c660d.chunk.js","sourcesContent":["import React, { Component, createRef } from \"react\";\n\nimport $ from \"jquery\";\n\nimport \"mathquill/build/mathquill.css\";\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nwindow.jQuery = $;\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nrequire(\"mathquill/build/mathquill\");\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\n// eslint-disable-next-line no-undef\nconst mathQuill = MathQuill.getInterface(2);\n\ntype EquationEditorProps = {\n  onChange(latex: string): void;\n  value: string;\n  autoCommands: string,\n  autoOperatorNames: string\n};\n\nclass EquationEditor extends Component<EquationEditorProps> {\n  element: any;\n  mathField: any;\n  ignoreEditEvents: number;\n\n  constructor(props: EquationEditorProps) {\n    super(props);\n\n    this.element = createRef();\n    this.mathField = null;\n\n    // MathJax apparently fire 2 edit events on startup.\n    this.ignoreEditEvents = 2;\n  }\n\n  componentDidMount() {\n    const { onChange, value, autoCommands, autoOperatorNames } = this.props;\n\n    const config = {\n      handlers: {\n        edit: () => {\n          if (this.ignoreEditEvents > 0) {\n            this.ignoreEditEvents -= 1;\n            return;\n          }\n          if (this.mathField.latex() !== value) {\n            onChange(this.mathField.latex());\n          }\n        }\n      },\n      autoCommands,\n      autoOperatorNames\n    };\n\n    this.mathField = mathQuill.MathField(this.element.current, config);\n    this.mathField.latex(value || \"\");\n  }\n\n  render() {\n    return <span ref={this.element} />;\n  }\n}\n\nexport default EquationEditor;\n","import React, { useState, CSSProperties } from \"react\";\n\n// Import Equation Editor component --------------------------------------\n\nimport EquationEditor from \"../EquationEditor\";\n\n// Styling ---------------------------------------------------------------\n\nconst equationWrapperStyle: CSSProperties = {\n  fontSize: \"24px\",\n  position: \"absolute\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%, -50%)\"\n};\n\nconst equationOutputStyle: CSSProperties = { fontSize: \"16px\" };\n\n// Actual code -----------------------------------------------------------\n\nconst Page = () => {\n  const [equation, updateEquation] = useState(\"y=x\");\n\n  return (\n    <div style={equationWrapperStyle}>\n      <EquationEditor\n        value={equation}\n        onChange={updateEquation}\n        autoCommands=\"pi theta sqrt sum prod alpha beta gamma rho sigma delta epsilon\"\n        autoOperatorNames=\"sin cos tan\"\n      />\n      <p style={equationOutputStyle}>\n        <code>{equation}</code>\n      </p>\n    </div>\n  );\n};\n\nexport default Page;\n","import React from \"react\";\n\nimport \"./App.css\";\n\nimport Page from \"./components/Page\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Page />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}